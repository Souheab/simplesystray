/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __DBUS_STATUS_NOTIFIER_ITEM_H__
#define __DBUS_STATUS_NOTIFIER_ITEM_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.kde.StatusNotifierItem */

#define TYPE_SN_ITEM (sn_item_get_type ())
#define SN_ITEM(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SN_ITEM, SnItem))
#define IS_SN_ITEM(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SN_ITEM))
#define SN_ITEM_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_SN_ITEM, SnItemIface))

struct _SnItem;
typedef struct _SnItem SnItem;
typedef struct _SnItemIface SnItemIface;

struct _SnItemIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_activate) (
    SnItem *object,
    GDBusMethodInvocation *invocation,
    gint arg_x,
    gint arg_y);

  gboolean (*handle_context_menu) (
    SnItem *object,
    GDBusMethodInvocation *invocation,
    gint arg_x,
    gint arg_y);

  gboolean (*handle_scroll) (
    SnItem *object,
    GDBusMethodInvocation *invocation,
    gint arg_delta,
    const gchar *arg_orientation);

  gboolean (*handle_secondary_activate) (
    SnItem *object,
    GDBusMethodInvocation *invocation,
    gint arg_x,
    gint arg_y);

  const gchar * (*get_attention_icon_name) (SnItem *object);

  GVariant * (*get_attention_icon_pixmap) (SnItem *object);

  const gchar * (*get_attention_movie_name) (SnItem *object);

  const gchar * (*get_category) (SnItem *object);

  const gchar * (*get_icon_name) (SnItem *object);

  GVariant * (*get_icon_pixmap) (SnItem *object);

  const gchar * (*get_id) (SnItem *object);

  gboolean  (*get_item_is_menu) (SnItem *object);

  const gchar * (*get_menu) (SnItem *object);

  const gchar * (*get_overlay_icon_name) (SnItem *object);

  GVariant * (*get_overlay_icon_pixmap) (SnItem *object);

  const gchar * (*get_status) (SnItem *object);

  const gchar * (*get_title) (SnItem *object);

  GVariant * (*get_tool_tip) (SnItem *object);

  gint  (*get_window_id) (SnItem *object);

  void (*new_attention_icon) (
    SnItem *object);

  void (*new_icon) (
    SnItem *object);

  void (*new_overlay_icon) (
    SnItem *object);

  void (*new_status) (
    SnItem *object,
    const gchar *arg_status);

  void (*new_title) (
    SnItem *object);

  void (*new_tool_tip) (
    SnItem *object);

};

GType sn_item_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *sn_item_interface_info (void);
guint sn_item_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void sn_item_complete_context_menu (
    SnItem *object,
    GDBusMethodInvocation *invocation);

void sn_item_complete_activate (
    SnItem *object,
    GDBusMethodInvocation *invocation);

void sn_item_complete_secondary_activate (
    SnItem *object,
    GDBusMethodInvocation *invocation);

void sn_item_complete_scroll (
    SnItem *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void sn_item_emit_new_title (
    SnItem *object);

void sn_item_emit_new_icon (
    SnItem *object);

void sn_item_emit_new_attention_icon (
    SnItem *object);

void sn_item_emit_new_overlay_icon (
    SnItem *object);

void sn_item_emit_new_tool_tip (
    SnItem *object);

void sn_item_emit_new_status (
    SnItem *object,
    const gchar *arg_status);



/* D-Bus method calls: */
void sn_item_call_context_menu (
    SnItem *proxy,
    gint arg_x,
    gint arg_y,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sn_item_call_context_menu_finish (
    SnItem *proxy,
    GAsyncResult *res,
    GError **error);

gboolean sn_item_call_context_menu_sync (
    SnItem *proxy,
    gint arg_x,
    gint arg_y,
    GCancellable *cancellable,
    GError **error);

void sn_item_call_activate (
    SnItem *proxy,
    gint arg_x,
    gint arg_y,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sn_item_call_activate_finish (
    SnItem *proxy,
    GAsyncResult *res,
    GError **error);

gboolean sn_item_call_activate_sync (
    SnItem *proxy,
    gint arg_x,
    gint arg_y,
    GCancellable *cancellable,
    GError **error);

void sn_item_call_secondary_activate (
    SnItem *proxy,
    gint arg_x,
    gint arg_y,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sn_item_call_secondary_activate_finish (
    SnItem *proxy,
    GAsyncResult *res,
    GError **error);

gboolean sn_item_call_secondary_activate_sync (
    SnItem *proxy,
    gint arg_x,
    gint arg_y,
    GCancellable *cancellable,
    GError **error);

void sn_item_call_scroll (
    SnItem *proxy,
    gint arg_delta,
    const gchar *arg_orientation,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sn_item_call_scroll_finish (
    SnItem *proxy,
    GAsyncResult *res,
    GError **error);

gboolean sn_item_call_scroll_sync (
    SnItem *proxy,
    gint arg_delta,
    const gchar *arg_orientation,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *sn_item_get_category (SnItem *object);
gchar *sn_item_dup_category (SnItem *object);
void sn_item_set_category (SnItem *object, const gchar *value);

const gchar *sn_item_get_id (SnItem *object);
gchar *sn_item_dup_id (SnItem *object);
void sn_item_set_id (SnItem *object, const gchar *value);

const gchar *sn_item_get_title (SnItem *object);
gchar *sn_item_dup_title (SnItem *object);
void sn_item_set_title (SnItem *object, const gchar *value);

const gchar *sn_item_get_status (SnItem *object);
gchar *sn_item_dup_status (SnItem *object);
void sn_item_set_status (SnItem *object, const gchar *value);

gint sn_item_get_window_id (SnItem *object);
void sn_item_set_window_id (SnItem *object, gint value);

const gchar *sn_item_get_icon_name (SnItem *object);
gchar *sn_item_dup_icon_name (SnItem *object);
void sn_item_set_icon_name (SnItem *object, const gchar *value);

GVariant *sn_item_get_icon_pixmap (SnItem *object);
GVariant *sn_item_dup_icon_pixmap (SnItem *object);
void sn_item_set_icon_pixmap (SnItem *object, GVariant *value);

const gchar *sn_item_get_overlay_icon_name (SnItem *object);
gchar *sn_item_dup_overlay_icon_name (SnItem *object);
void sn_item_set_overlay_icon_name (SnItem *object, const gchar *value);

GVariant *sn_item_get_overlay_icon_pixmap (SnItem *object);
GVariant *sn_item_dup_overlay_icon_pixmap (SnItem *object);
void sn_item_set_overlay_icon_pixmap (SnItem *object, GVariant *value);

const gchar *sn_item_get_attention_icon_name (SnItem *object);
gchar *sn_item_dup_attention_icon_name (SnItem *object);
void sn_item_set_attention_icon_name (SnItem *object, const gchar *value);

GVariant *sn_item_get_attention_icon_pixmap (SnItem *object);
GVariant *sn_item_dup_attention_icon_pixmap (SnItem *object);
void sn_item_set_attention_icon_pixmap (SnItem *object, GVariant *value);

const gchar *sn_item_get_attention_movie_name (SnItem *object);
gchar *sn_item_dup_attention_movie_name (SnItem *object);
void sn_item_set_attention_movie_name (SnItem *object, const gchar *value);

GVariant *sn_item_get_tool_tip (SnItem *object);
GVariant *sn_item_dup_tool_tip (SnItem *object);
void sn_item_set_tool_tip (SnItem *object, GVariant *value);

gboolean sn_item_get_item_is_menu (SnItem *object);
void sn_item_set_item_is_menu (SnItem *object, gboolean value);

const gchar *sn_item_get_menu (SnItem *object);
gchar *sn_item_dup_menu (SnItem *object);
void sn_item_set_menu (SnItem *object, const gchar *value);


/* ---- */

#define TYPE_SN_ITEM_PROXY (sn_item_proxy_get_type ())
#define SN_ITEM_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SN_ITEM_PROXY, SnItemProxy))
#define SN_ITEM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SN_ITEM_PROXY, SnItemProxyClass))
#define SN_ITEM_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SN_ITEM_PROXY, SnItemProxyClass))
#define IS_SN_ITEM_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SN_ITEM_PROXY))
#define IS_SN_ITEM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SN_ITEM_PROXY))

typedef struct _SnItemProxy SnItemProxy;
typedef struct _SnItemProxyClass SnItemProxyClass;
typedef struct _SnItemProxyPrivate SnItemProxyPrivate;

struct _SnItemProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  SnItemProxyPrivate *priv;
};

struct _SnItemProxyClass
{
  GDBusProxyClass parent_class;
};

GType sn_item_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (SnItemProxy, g_object_unref)
#endif

void sn_item_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
SnItem *sn_item_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
SnItem *sn_item_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void sn_item_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
SnItem *sn_item_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
SnItem *sn_item_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_SN_ITEM_SKELETON (sn_item_skeleton_get_type ())
#define SN_ITEM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SN_ITEM_SKELETON, SnItemSkeleton))
#define SN_ITEM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SN_ITEM_SKELETON, SnItemSkeletonClass))
#define SN_ITEM_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SN_ITEM_SKELETON, SnItemSkeletonClass))
#define IS_SN_ITEM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SN_ITEM_SKELETON))
#define IS_SN_ITEM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SN_ITEM_SKELETON))

typedef struct _SnItemSkeleton SnItemSkeleton;
typedef struct _SnItemSkeletonClass SnItemSkeletonClass;
typedef struct _SnItemSkeletonPrivate SnItemSkeletonPrivate;

struct _SnItemSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  SnItemSkeletonPrivate *priv;
};

struct _SnItemSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType sn_item_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (SnItemSkeleton, g_object_unref)
#endif

SnItem *sn_item_skeleton_new (void);


G_END_DECLS

#endif /* __DBUS_STATUS_NOTIFIER_ITEM_H__ */
